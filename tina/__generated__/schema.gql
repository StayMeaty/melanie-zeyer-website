# DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
"""References another document, used as a foreign key"""
scalar Reference

""""""
scalar JSON

type SystemInfo {
  filename: String!
  title: String
  basename: String!
  hasReferences: Boolean
  breadcrumbs(excludeExtension: Boolean): [String!]!
  path: String!
  relativePath: String!
  extension: String!
  template: String!
  collection: Collection!
}

type Folder {
  name: String!
  path: String!
}

type PageInfo {
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  startCursor: String!
  endCursor: String!
}

""""""
interface Node {
  id: ID!
}

""""""
interface Document {
  id: ID!
  _sys: SystemInfo
  _values: JSON!
}

"""A relay-compliant pagination connection"""
interface Connection {
  totalCount: Float!
  pageInfo: PageInfo!
}

type Query {
  getOptimizedQuery(queryString: String!): String
  collection(collection: String): Collection!
  collections: [Collection!]!
  node(id: String): Node!
  document(collection: String, relativePath: String): DocumentNode!
  blog(relativePath: String): Blog!
  blogConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: BlogFilter): BlogConnection!
  authors(relativePath: String): Authors!
  authorsConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: AuthorsFilter): AuthorsConnection!
}

input DocumentFilter {
  blog: BlogFilter
  authors: AuthorsFilter
}

type DocumentConnectionEdges {
  cursor: String!
  node: DocumentNode
}

type DocumentConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [DocumentConnectionEdges]
}

type Collection {
  name: String!
  slug: String!
  label: String
  path: String!
  format: String
  matches: String
  templates: [JSON]
  fields: [JSON]
  documents(before: String, after: String, first: Float, last: Float, sort: String, filter: DocumentFilter, folder: String): DocumentConnection!
}

union DocumentNode = Blog | Authors | Folder

type BlogSeo {
  metaTitle: String
  metaDescription: String
  canonicalUrl: String
  ogImage: String
  ogTitle: String
  ogDescription: String
  twitterTitle: String
  twitterDescription: String
  twitterImage: String
  twitterCard: String
  keywords: [String]
  focusKeyphrase: String
  robots: String
}

type Blog implements Node & Document {
  title: String!
  slug: String!
  date: String!
  excerpt: String!
  author: String!
  category: String!
  tags: [String]
  image: String
  imageAlt: String
  status: String!
  featured: Boolean
  seo: BlogSeo
  readingTime: Float
  lastModified: String
  body: JSON
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input StringFilter {
  startsWith: String
  eq: String
  exists: Boolean
  in: [String]
}

input DatetimeFilter {
  after: String
  before: String
  eq: String
  exists: Boolean
  in: [String]
}

input ImageFilter {
  startsWith: String
  eq: String
  exists: Boolean
  in: [String]
}

input BooleanFilter {
  eq: Boolean
  exists: Boolean
}

input BlogSeoFilter {
  metaTitle: StringFilter
  metaDescription: StringFilter
  canonicalUrl: StringFilter
  ogImage: ImageFilter
  ogTitle: StringFilter
  ogDescription: StringFilter
  twitterTitle: StringFilter
  twitterDescription: StringFilter
  twitterImage: ImageFilter
  twitterCard: StringFilter
  keywords: StringFilter
  focusKeyphrase: StringFilter
  robots: StringFilter
}

input NumberFilter {
  lt: Float
  lte: Float
  gte: Float
  gt: Float
  eq: Float
  exists: Boolean
  in: [Float]
}

input BlogBodyQuoteFilter {
  text: StringFilter
  author: StringFilter
}

input BlogBodyCallToActionFilter {
  text: StringFilter
  link: StringFilter
  style: StringFilter
}

input BlogBodyFilter {
  Quote: BlogBodyQuoteFilter
  CallToAction: BlogBodyCallToActionFilter
}

input BlogFilter {
  title: StringFilter
  slug: StringFilter
  date: DatetimeFilter
  excerpt: StringFilter
  author: StringFilter
  category: StringFilter
  tags: StringFilter
  image: ImageFilter
  imageAlt: StringFilter
  status: StringFilter
  featured: BooleanFilter
  seo: BlogSeoFilter
  readingTime: NumberFilter
  lastModified: DatetimeFilter
  body: BlogBodyFilter
}

type BlogConnectionEdges {
  cursor: String!
  node: Blog
}

type BlogConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [BlogConnectionEdges]
}

type AuthorsSocial {
  instagram: String
  linkedin: String
  twitter: String
}

type Authors implements Node & Document {
  name: String!
  email: String!
  bio: String
  avatar: String
  website: String
  social: AuthorsSocial
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input AuthorsSocialFilter {
  instagram: StringFilter
  linkedin: StringFilter
  twitter: StringFilter
}

input AuthorsFilter {
  name: StringFilter
  email: StringFilter
  bio: StringFilter
  avatar: ImageFilter
  website: StringFilter
  social: AuthorsSocialFilter
}

type AuthorsConnectionEdges {
  cursor: String!
  node: Authors
}

type AuthorsConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [AuthorsConnectionEdges]
}

type Mutation {
  addPendingDocument(collection: String!, relativePath: String!, template: String): DocumentNode!
  updateDocument(collection: String, relativePath: String!, params: DocumentUpdateMutation!): DocumentNode!
  deleteDocument(collection: String, relativePath: String!): DocumentNode!
  createDocument(collection: String, relativePath: String!, params: DocumentMutation!): DocumentNode!
  createFolder(collection: String, relativePath: String!): DocumentNode!
  updateBlog(relativePath: String!, params: BlogMutation!): Blog!
  createBlog(relativePath: String!, params: BlogMutation!): Blog!
  updateAuthors(relativePath: String!, params: AuthorsMutation!): Authors!
  createAuthors(relativePath: String!, params: AuthorsMutation!): Authors!
}

input DocumentUpdateMutation {
  blog: BlogMutation
  authors: AuthorsMutation
  relativePath: String
}

input DocumentMutation {
  blog: BlogMutation
  authors: AuthorsMutation
}

input BlogSeoMutation {
  metaTitle: String
  metaDescription: String
  canonicalUrl: String
  ogImage: String
  ogTitle: String
  ogDescription: String
  twitterTitle: String
  twitterDescription: String
  twitterImage: String
  twitterCard: String
  keywords: [String]
  focusKeyphrase: String
  robots: String
}

input BlogMutation {
  title: String
  slug: String
  date: String
  excerpt: String
  author: String
  category: String
  tags: [String]
  image: String
  imageAlt: String
  status: String
  featured: Boolean
  seo: BlogSeoMutation
  readingTime: Float
  lastModified: String
  body: JSON
}

input AuthorsSocialMutation {
  instagram: String
  linkedin: String
  twitter: String
}

input AuthorsMutation {
  name: String
  email: String
  bio: String
  avatar: String
  website: String
  social: AuthorsSocialMutation
}

schema {
  query: Query
  mutation: Mutation
}
