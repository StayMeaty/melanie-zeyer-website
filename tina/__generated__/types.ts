// DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
// Note: @ts-nocheck removed to enable proper type checking

/** Tina rich text content type */
export type TinaRichTextContent = Record<string, unknown> | string | null;

export function gql(strings: TemplateStringsArray, ...args: string[]): string {
    let str = ''
    strings.forEach((string, i) => {
      str += string + (args[i] || '')
    })
    return str
  }
  export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
export type MakeEmpty<T extends { [key: string]: unknown }, K extends keyof T> = { [_ in K]?: never };
export type Incremental<T> = T | { [P in keyof T]?: P extends ' $fragmentName' | '__typename' ? T[P] : never };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: { input: string; output: string; }
  String: { input: string; output: string; }
  Boolean: { input: boolean; output: boolean; }
  Int: { input: number; output: number; }
  Float: { input: number; output: number; }
  /** References another document, used as a foreign key */
  Reference: { input: string | Record<string, unknown>; output: string | Record<string, unknown>; }
  JSON: { input: Record<string, unknown> | string | number | boolean | null; output: Record<string, unknown> | string | number | boolean | null; }
};

export type SystemInfo = {
  __typename?: 'SystemInfo';
  filename: Scalars['String']['output'];
  title?: Maybe<Scalars['String']['output']>;
  basename: Scalars['String']['output'];
  hasReferences?: Maybe<Scalars['Boolean']['output']>;
  breadcrumbs: Array<Scalars['String']['output']>;
  path: Scalars['String']['output'];
  relativePath: Scalars['String']['output'];
  extension: Scalars['String']['output'];
  template: Scalars['String']['output'];
  collection: Collection;
};


export type SystemInfoBreadcrumbsArgs = {
  excludeExtension?: InputMaybe<Scalars['Boolean']['input']>;
};

export type Folder = {
  __typename?: 'Folder';
  name: Scalars['String']['output'];
  path: Scalars['String']['output'];
};

export type PageInfo = {
  __typename?: 'PageInfo';
  hasPreviousPage: Scalars['Boolean']['output'];
  hasNextPage: Scalars['Boolean']['output'];
  startCursor: Scalars['String']['output'];
  endCursor: Scalars['String']['output'];
};

export type Node = {
  id: Scalars['ID']['output'];
};

export type Document = {
  id: Scalars['ID']['output'];
  _sys?: Maybe<SystemInfo>;
  _values: Scalars['JSON']['output'];
};

/** A relay-compliant pagination connection */
export type Connection = {
  totalCount: Scalars['Float']['output'];
  pageInfo: PageInfo;
};

export type Query = {
  __typename?: 'Query';
  getOptimizedQuery?: Maybe<Scalars['String']['output']>;
  collection: Collection;
  collections: Array<Collection>;
  node: Node;
  document: DocumentNode;
  blog: Blog;
  blogConnection: BlogConnection;
  authors: Authors;
  authorsConnection: AuthorsConnection;
};


export type QueryGetOptimizedQueryArgs = {
  queryString: Scalars['String']['input'];
};


export type QueryCollectionArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
};


export type QueryNodeArgs = {
  id?: InputMaybe<Scalars['String']['input']>;
};


export type QueryDocumentArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryBlogArgs = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryBlogConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<BlogFilter>;
};


export type QueryAuthorsArgs = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryAuthorsConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<AuthorsFilter>;
};

export type DocumentFilter = {
  blog?: InputMaybe<BlogFilter>;
  authors?: InputMaybe<AuthorsFilter>;
};

export type DocumentConnectionEdges = {
  __typename?: 'DocumentConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<DocumentNode>;
};

export type DocumentConnection = Connection & {
  __typename?: 'DocumentConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<DocumentConnectionEdges>>>;
};

export type Collection = {
  __typename?: 'Collection';
  name: Scalars['String']['output'];
  slug: Scalars['String']['output'];
  label?: Maybe<Scalars['String']['output']>;
  path: Scalars['String']['output'];
  format?: Maybe<Scalars['String']['output']>;
  matches?: Maybe<Scalars['String']['output']>;
  templates?: Maybe<Array<Maybe<Scalars['JSON']['output']>>>;
  fields?: Maybe<Array<Maybe<Scalars['JSON']['output']>>>;
  documents: DocumentConnection;
};


export type CollectionDocumentsArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<DocumentFilter>;
  folder?: InputMaybe<Scalars['String']['input']>;
};

export type DocumentNode = Blog | Authors | Folder;

export type BlogSeo = {
  __typename?: 'BlogSeo';
  metaTitle?: Maybe<Scalars['String']['output']>;
  metaDescription?: Maybe<Scalars['String']['output']>;
  canonicalUrl?: Maybe<Scalars['String']['output']>;
  ogImage?: Maybe<Scalars['String']['output']>;
  ogTitle?: Maybe<Scalars['String']['output']>;
  ogDescription?: Maybe<Scalars['String']['output']>;
  twitterTitle?: Maybe<Scalars['String']['output']>;
  twitterDescription?: Maybe<Scalars['String']['output']>;
  twitterImage?: Maybe<Scalars['String']['output']>;
  twitterCard?: Maybe<Scalars['String']['output']>;
  keywords?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  focusKeyphrase?: Maybe<Scalars['String']['output']>;
  robots?: Maybe<Scalars['String']['output']>;
};

export type Blog = Node & Document & {
  __typename?: 'Blog';
  title: Scalars['String']['output'];
  slug: Scalars['String']['output'];
  date: Scalars['String']['output'];
  excerpt: Scalars['String']['output'];
  author: Scalars['String']['output'];
  category: Scalars['String']['output'];
  tags?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  image?: Maybe<Scalars['String']['output']>;
  imageAlt?: Maybe<Scalars['String']['output']>;
  status: Scalars['String']['output'];
  featured?: Maybe<Scalars['Boolean']['output']>;
  seo?: Maybe<BlogSeo>;
  readingTime?: Maybe<Scalars['Float']['output']>;
  lastModified?: Maybe<Scalars['String']['output']>;
  body?: Maybe<Scalars['JSON']['output']>;
  id: Scalars['ID']['output'];
  _sys: SystemInfo;
  _values: Scalars['JSON']['output'];
};

export type StringFilter = {
  startsWith?: InputMaybe<Scalars['String']['input']>;
  eq?: InputMaybe<Scalars['String']['input']>;
  exists?: InputMaybe<Scalars['Boolean']['input']>;
  in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};

export type DatetimeFilter = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  eq?: InputMaybe<Scalars['String']['input']>;
  exists?: InputMaybe<Scalars['Boolean']['input']>;
  in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};

export type ImageFilter = {
  startsWith?: InputMaybe<Scalars['String']['input']>;
  eq?: InputMaybe<Scalars['String']['input']>;
  exists?: InputMaybe<Scalars['Boolean']['input']>;
  in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};

export type BooleanFilter = {
  eq?: InputMaybe<Scalars['Boolean']['input']>;
  exists?: InputMaybe<Scalars['Boolean']['input']>;
};

export type BlogSeoFilter = {
  metaTitle?: InputMaybe<StringFilter>;
  metaDescription?: InputMaybe<StringFilter>;
  canonicalUrl?: InputMaybe<StringFilter>;
  ogImage?: InputMaybe<ImageFilter>;
  ogTitle?: InputMaybe<StringFilter>;
  ogDescription?: InputMaybe<StringFilter>;
  twitterTitle?: InputMaybe<StringFilter>;
  twitterDescription?: InputMaybe<StringFilter>;
  twitterImage?: InputMaybe<ImageFilter>;
  twitterCard?: InputMaybe<StringFilter>;
  keywords?: InputMaybe<StringFilter>;
  focusKeyphrase?: InputMaybe<StringFilter>;
  robots?: InputMaybe<StringFilter>;
};

export type NumberFilter = {
  lt?: InputMaybe<Scalars['Float']['input']>;
  lte?: InputMaybe<Scalars['Float']['input']>;
  gte?: InputMaybe<Scalars['Float']['input']>;
  gt?: InputMaybe<Scalars['Float']['input']>;
  eq?: InputMaybe<Scalars['Float']['input']>;
  exists?: InputMaybe<Scalars['Boolean']['input']>;
  in?: InputMaybe<Array<InputMaybe<Scalars['Float']['input']>>>;
};

export type BlogBodyQuoteFilter = {
  text?: InputMaybe<StringFilter>;
  author?: InputMaybe<StringFilter>;
};

export type BlogBodyCallToActionFilter = {
  text?: InputMaybe<StringFilter>;
  link?: InputMaybe<StringFilter>;
  style?: InputMaybe<StringFilter>;
};

export type BlogBodyFilter = {
  Quote?: InputMaybe<BlogBodyQuoteFilter>;
  CallToAction?: InputMaybe<BlogBodyCallToActionFilter>;
};

export type BlogFilter = {
  title?: InputMaybe<StringFilter>;
  slug?: InputMaybe<StringFilter>;
  date?: InputMaybe<DatetimeFilter>;
  excerpt?: InputMaybe<StringFilter>;
  author?: InputMaybe<StringFilter>;
  category?: InputMaybe<StringFilter>;
  tags?: InputMaybe<StringFilter>;
  image?: InputMaybe<ImageFilter>;
  imageAlt?: InputMaybe<StringFilter>;
  status?: InputMaybe<StringFilter>;
  featured?: InputMaybe<BooleanFilter>;
  seo?: InputMaybe<BlogSeoFilter>;
  readingTime?: InputMaybe<NumberFilter>;
  lastModified?: InputMaybe<DatetimeFilter>;
  body?: InputMaybe<BlogBodyFilter>;
};

export type BlogConnectionEdges = {
  __typename?: 'BlogConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<Blog>;
};

export type BlogConnection = Connection & {
  __typename?: 'BlogConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<BlogConnectionEdges>>>;
};

export type AuthorsSocial = {
  __typename?: 'AuthorsSocial';
  instagram?: Maybe<Scalars['String']['output']>;
  linkedin?: Maybe<Scalars['String']['output']>;
  twitter?: Maybe<Scalars['String']['output']>;
};

export type Authors = Node & Document & {
  __typename?: 'Authors';
  name: Scalars['String']['output'];
  email: Scalars['String']['output'];
  bio?: Maybe<Scalars['String']['output']>;
  avatar?: Maybe<Scalars['String']['output']>;
  website?: Maybe<Scalars['String']['output']>;
  social?: Maybe<AuthorsSocial>;
  id: Scalars['ID']['output'];
  _sys: SystemInfo;
  _values: Scalars['JSON']['output'];
};

export type AuthorsSocialFilter = {
  instagram?: InputMaybe<StringFilter>;
  linkedin?: InputMaybe<StringFilter>;
  twitter?: InputMaybe<StringFilter>;
};

export type AuthorsFilter = {
  name?: InputMaybe<StringFilter>;
  email?: InputMaybe<StringFilter>;
  bio?: InputMaybe<StringFilter>;
  avatar?: InputMaybe<ImageFilter>;
  website?: InputMaybe<StringFilter>;
  social?: InputMaybe<AuthorsSocialFilter>;
};

export type AuthorsConnectionEdges = {
  __typename?: 'AuthorsConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<Authors>;
};

export type AuthorsConnection = Connection & {
  __typename?: 'AuthorsConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<AuthorsConnectionEdges>>>;
};

export type Mutation = {
  __typename?: 'Mutation';
  addPendingDocument: DocumentNode;
  updateDocument: DocumentNode;
  deleteDocument: DocumentNode;
  createDocument: DocumentNode;
  createFolder: DocumentNode;
  updateBlog: Blog;
  createBlog: Blog;
  updateAuthors: Authors;
  createAuthors: Authors;
};


export type MutationAddPendingDocumentArgs = {
  collection: Scalars['String']['input'];
  relativePath: Scalars['String']['input'];
  template?: InputMaybe<Scalars['String']['input']>;
};


export type MutationUpdateDocumentArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath: Scalars['String']['input'];
  params: DocumentUpdateMutation;
};


export type MutationDeleteDocumentArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath: Scalars['String']['input'];
};


export type MutationCreateDocumentArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath: Scalars['String']['input'];
  params: DocumentMutation;
};


export type MutationCreateFolderArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath: Scalars['String']['input'];
};


export type MutationUpdateBlogArgs = {
  relativePath: Scalars['String']['input'];
  params: BlogMutation;
};


export type MutationCreateBlogArgs = {
  relativePath: Scalars['String']['input'];
  params: BlogMutation;
};


export type MutationUpdateAuthorsArgs = {
  relativePath: Scalars['String']['input'];
  params: AuthorsMutation;
};


export type MutationCreateAuthorsArgs = {
  relativePath: Scalars['String']['input'];
  params: AuthorsMutation;
};

export type DocumentUpdateMutation = {
  blog?: InputMaybe<BlogMutation>;
  authors?: InputMaybe<AuthorsMutation>;
  relativePath?: InputMaybe<Scalars['String']['input']>;
};

export type DocumentMutation = {
  blog?: InputMaybe<BlogMutation>;
  authors?: InputMaybe<AuthorsMutation>;
};

export type BlogSeoMutation = {
  metaTitle?: InputMaybe<Scalars['String']['input']>;
  metaDescription?: InputMaybe<Scalars['String']['input']>;
  canonicalUrl?: InputMaybe<Scalars['String']['input']>;
  ogImage?: InputMaybe<Scalars['String']['input']>;
  ogTitle?: InputMaybe<Scalars['String']['input']>;
  ogDescription?: InputMaybe<Scalars['String']['input']>;
  twitterTitle?: InputMaybe<Scalars['String']['input']>;
  twitterDescription?: InputMaybe<Scalars['String']['input']>;
  twitterImage?: InputMaybe<Scalars['String']['input']>;
  twitterCard?: InputMaybe<Scalars['String']['input']>;
  keywords?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  focusKeyphrase?: InputMaybe<Scalars['String']['input']>;
  robots?: InputMaybe<Scalars['String']['input']>;
};

export type BlogMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  slug?: InputMaybe<Scalars['String']['input']>;
  date?: InputMaybe<Scalars['String']['input']>;
  excerpt?: InputMaybe<Scalars['String']['input']>;
  author?: InputMaybe<Scalars['String']['input']>;
  category?: InputMaybe<Scalars['String']['input']>;
  tags?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  image?: InputMaybe<Scalars['String']['input']>;
  imageAlt?: InputMaybe<Scalars['String']['input']>;
  status?: InputMaybe<Scalars['String']['input']>;
  featured?: InputMaybe<Scalars['Boolean']['input']>;
  seo?: InputMaybe<BlogSeoMutation>;
  readingTime?: InputMaybe<Scalars['Float']['input']>;
  lastModified?: InputMaybe<Scalars['String']['input']>;
  body?: InputMaybe<Scalars['JSON']['input']>;
};

export type AuthorsSocialMutation = {
  instagram?: InputMaybe<Scalars['String']['input']>;
  linkedin?: InputMaybe<Scalars['String']['input']>;
  twitter?: InputMaybe<Scalars['String']['input']>;
};

export type AuthorsMutation = {
  name?: InputMaybe<Scalars['String']['input']>;
  email?: InputMaybe<Scalars['String']['input']>;
  bio?: InputMaybe<Scalars['String']['input']>;
  avatar?: InputMaybe<Scalars['String']['input']>;
  website?: InputMaybe<Scalars['String']['input']>;
  social?: InputMaybe<AuthorsSocialMutation>;
};

export type BlogPartsFragment = { __typename: 'Blog', title: string, slug: string, date: string, excerpt: string, author: string, category: string, tags?: Array<string | null> | null, image?: string | null, imageAlt?: string | null, status: string, featured?: boolean | null, readingTime?: number | null, lastModified?: string | null, body?: TinaRichTextContent, seo?: { __typename: 'BlogSeo', metaTitle?: string | null, metaDescription?: string | null, canonicalUrl?: string | null, ogImage?: string | null, ogTitle?: string | null, ogDescription?: string | null, twitterTitle?: string | null, twitterDescription?: string | null, twitterImage?: string | null, twitterCard?: string | null, keywords?: Array<string | null> | null, focusKeyphrase?: string | null, robots?: string | null } | null };

export type AuthorsPartsFragment = { __typename: 'Authors', name: string, email: string, bio?: string | null, avatar?: string | null, website?: string | null, social?: { __typename: 'AuthorsSocial', instagram?: string | null, linkedin?: string | null, twitter?: string | null } | null };

export type BlogQueryVariables = Exact<{
  relativePath: Scalars['String']['input'];
}>;


export type BlogQuery = { __typename?: 'Query', blog: { __typename: 'Blog', id: string, title: string, slug: string, date: string, excerpt: string, author: string, category: string, tags?: Array<string | null> | null, image?: string | null, imageAlt?: string | null, status: string, featured?: boolean | null, readingTime?: number | null, lastModified?: string | null, body?: TinaRichTextContent, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, seo?: { __typename: 'BlogSeo', metaTitle?: string | null, metaDescription?: string | null, canonicalUrl?: string | null, ogImage?: string | null, ogTitle?: string | null, ogDescription?: string | null, twitterTitle?: string | null, twitterDescription?: string | null, twitterImage?: string | null, twitterCard?: string | null, keywords?: Array<string | null> | null, focusKeyphrase?: string | null, robots?: string | null } | null } };

export type BlogConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<BlogFilter>;
}>;


export type BlogConnectionQuery = { __typename?: 'Query', blogConnection: { __typename?: 'BlogConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'BlogConnectionEdges', cursor: string, node?: { __typename: 'Blog', id: string, title: string, slug: string, date: string, excerpt: string, author: string, category: string, tags?: Array<string | null> | null, image?: string | null, imageAlt?: string | null, status: string, featured?: boolean | null, readingTime?: number | null, lastModified?: string | null, body?: TinaRichTextContent, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, seo?: { __typename: 'BlogSeo', metaTitle?: string | null, metaDescription?: string | null, canonicalUrl?: string | null, ogImage?: string | null, ogTitle?: string | null, ogDescription?: string | null, twitterTitle?: string | null, twitterDescription?: string | null, twitterImage?: string | null, twitterCard?: string | null, keywords?: Array<string | null> | null, focusKeyphrase?: string | null, robots?: string | null } | null } | null } | null> | null } };

export type AuthorsQueryVariables = Exact<{
  relativePath: Scalars['String']['input'];
}>;


export type AuthorsQuery = { __typename?: 'Query', authors: { __typename: 'Authors', id: string, name: string, email: string, bio?: string | null, avatar?: string | null, website?: string | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, social?: { __typename: 'AuthorsSocial', instagram?: string | null, linkedin?: string | null, twitter?: string | null } | null } };

export type AuthorsConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<AuthorsFilter>;
}>;


export type AuthorsConnectionQuery = { __typename?: 'Query', authorsConnection: { __typename?: 'AuthorsConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'AuthorsConnectionEdges', cursor: string, node?: { __typename: 'Authors', id: string, name: string, email: string, bio?: string | null, avatar?: string | null, website?: string | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, social?: { __typename: 'AuthorsSocial', instagram?: string | null, linkedin?: string | null, twitter?: string | null } | null } | null } | null> | null } };

export const BlogPartsFragmentDoc = gql`
    fragment BlogParts on Blog {
  __typename
  title
  slug
  date
  excerpt
  author
  category
  tags
  image
  imageAlt
  status
  featured
  seo {
    __typename
    metaTitle
    metaDescription
    canonicalUrl
    ogImage
    ogTitle
    ogDescription
    twitterTitle
    twitterDescription
    twitterImage
    twitterCard
    keywords
    focusKeyphrase
    robots
  }
  readingTime
  lastModified
  body
}
    `;
export const AuthorsPartsFragmentDoc = gql`
    fragment AuthorsParts on Authors {
  __typename
  name
  email
  bio
  avatar
  website
  social {
    __typename
    instagram
    linkedin
    twitter
  }
}
    `;
export const BlogDocument = gql`
    query blog($relativePath: String!) {
  blog(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        hasReferences
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...BlogParts
  }
}
    ${BlogPartsFragmentDoc}`;
export const BlogConnectionDocument = gql`
    query blogConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: BlogFilter) {
  blogConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            hasReferences
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...BlogParts
      }
    }
  }
}
    ${BlogPartsFragmentDoc}`;
export const AuthorsDocument = gql`
    query authors($relativePath: String!) {
  authors(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        hasReferences
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...AuthorsParts
  }
}
    ${AuthorsPartsFragmentDoc}`;
export const AuthorsConnectionDocument = gql`
    query authorsConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: AuthorsFilter) {
  authorsConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            hasReferences
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...AuthorsParts
      }
    }
  }
}
    ${AuthorsPartsFragmentDoc}`;
export type Requester<C= {}> = <R, V>(doc: string, vars?: V, options?: C) => Promise<R>
  export function getSdk<C>(requester: Requester<C>) {
    return {
      blog(variables: BlogQueryVariables, options?: C): Promise<{data: BlogQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: BlogQueryVariables, query: string}> {
        return requester<{data: BlogQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: BlogQueryVariables, query: string}, BlogQueryVariables>(BlogDocument, variables, options);
      },
    blogConnection(variables?: BlogConnectionQueryVariables, options?: C): Promise<{data: BlogConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: BlogConnectionQueryVariables, query: string}> {
        return requester<{data: BlogConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: BlogConnectionQueryVariables, query: string}, BlogConnectionQueryVariables>(BlogConnectionDocument, variables, options);
      },
    authors(variables: AuthorsQueryVariables, options?: C): Promise<{data: AuthorsQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: AuthorsQueryVariables, query: string}> {
        return requester<{data: AuthorsQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: AuthorsQueryVariables, query: string}, AuthorsQueryVariables>(AuthorsDocument, variables, options);
      },
    authorsConnection(variables?: AuthorsConnectionQueryVariables, options?: C): Promise<{data: AuthorsConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: AuthorsConnectionQueryVariables, query: string}> {
        return requester<{data: AuthorsConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: AuthorsConnectionQueryVariables, query: string}, AuthorsConnectionQueryVariables>(AuthorsConnectionDocument, variables, options);
      }
    };
  }
  export type Sdk = ReturnType<typeof getSdk>;

// TinaSDK generated code
import { createClient, TinaClient } from "tinacms/dist/client";

const generateRequester = (
  client: TinaClient<any>,
) => {
  const requester = async <R, V>(doc: string, vars?: V, options?: { branch?: string; fetchOptions?: Omit<Parameters<typeof fetch>[1], "body" | "method">; }): Promise<R> => {
    let url = client.apiUrl
    if (options?.branch) {
      const index = client.apiUrl.lastIndexOf('/')
      url = client.apiUrl.substring(0, index + 1) + options.branch
    }
    const requestOptions = options?.fetchOptions ? { fetchOptions: options.fetchOptions } : {};
    const data = await client.request({
      query: doc,
      variables: vars as Record<string, any> | undefined,
      url,
    }, requestOptions)

    return { data: data?.data, errors: data?.errors, query: doc, variables: vars || {} } as R
  }

  return requester
}

/**
 * @experimental this class can be used but may change in the future
 **/
export const ExperimentalGetTinaClient = () =>
  getSdk(
    generateRequester(
      createClient({
        url: "http://localhost:4001/graphql",
        queries,
      })
    )
  )

export const queries = (
  client: TinaClient<any>,
) => {
  const requester = generateRequester(client)
  return getSdk(requester)
}

  